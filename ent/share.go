// Code generated by ent, DO NOT EDIT.

package ent

import (
	"basket-buddy-backend/ent/share"
	"encoding/json"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
)

// Share is the model entity for the Share schema.
type Share struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// Expiration holds the value of the "expiration" field.
	Expiration time.Time `json:"expiration,omitempty"`
	// ShareCode holds the value of the "share_code" field.
	ShareCode string `json:"share_code,omitempty"`
	// Data holds the value of the "data" field.
	Data []map[string]interface{} `json:"data,omitempty"`
	// CreatorID holds the value of the "creator_id" field.
	CreatorID    uuid.UUID `json:"creator_id,omitempty"`
	selectValues sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Share) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case share.FieldData:
			values[i] = new([]byte)
		case share.FieldShareCode:
			values[i] = new(sql.NullString)
		case share.FieldCreatedAt, share.FieldExpiration:
			values[i] = new(sql.NullTime)
		case share.FieldID, share.FieldCreatorID:
			values[i] = new(uuid.UUID)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Share fields.
func (s *Share) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case share.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				s.ID = *value
			}
		case share.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				s.CreatedAt = value.Time
			}
		case share.FieldExpiration:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field expiration", values[i])
			} else if value.Valid {
				s.Expiration = value.Time
			}
		case share.FieldShareCode:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field share_code", values[i])
			} else if value.Valid {
				s.ShareCode = value.String
			}
		case share.FieldData:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field data", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &s.Data); err != nil {
					return fmt.Errorf("unmarshal field data: %w", err)
				}
			}
		case share.FieldCreatorID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field creator_id", values[i])
			} else if value != nil {
				s.CreatorID = *value
			}
		default:
			s.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Share.
// This includes values selected through modifiers, order, etc.
func (s *Share) Value(name string) (ent.Value, error) {
	return s.selectValues.Get(name)
}

// Update returns a builder for updating this Share.
// Note that you need to call Share.Unwrap() before calling this method if this Share
// was returned from a transaction, and the transaction was committed or rolled back.
func (s *Share) Update() *ShareUpdateOne {
	return NewShareClient(s.config).UpdateOne(s)
}

// Unwrap unwraps the Share entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (s *Share) Unwrap() *Share {
	_tx, ok := s.config.driver.(*txDriver)
	if !ok {
		panic("ent: Share is not a transactional entity")
	}
	s.config.driver = _tx.drv
	return s
}

// String implements the fmt.Stringer.
func (s *Share) String() string {
	var builder strings.Builder
	builder.WriteString("Share(")
	builder.WriteString(fmt.Sprintf("id=%v, ", s.ID))
	builder.WriteString("created_at=")
	builder.WriteString(s.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("expiration=")
	builder.WriteString(s.Expiration.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("share_code=")
	builder.WriteString(s.ShareCode)
	builder.WriteString(", ")
	builder.WriteString("data=")
	builder.WriteString(fmt.Sprintf("%v", s.Data))
	builder.WriteString(", ")
	builder.WriteString("creator_id=")
	builder.WriteString(fmt.Sprintf("%v", s.CreatorID))
	builder.WriteByte(')')
	return builder.String()
}

// Shares is a parsable slice of Share.
type Shares []*Share
