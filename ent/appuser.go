// Code generated by ent, DO NOT EDIT.

package ent

import (
	"basket-buddy-backend/ent/appuser"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
)

// AppUser is the model entity for the AppUser schema.
type AppUser struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// Username holds the value of the "username" field.
	Username string `json:"username,omitempty"`
	// Email holds the value of the "email" field.
	Email string `json:"email,omitempty"`
	// Role holds the value of the "role" field.
	Role string `json:"role,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// IsActive holds the value of the "is_active" field.
	IsActive     bool `json:"is_active,omitempty"`
	selectValues sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*AppUser) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case appuser.FieldIsActive:
			values[i] = new(sql.NullBool)
		case appuser.FieldUsername, appuser.FieldEmail, appuser.FieldRole:
			values[i] = new(sql.NullString)
		case appuser.FieldCreatedAt:
			values[i] = new(sql.NullTime)
		case appuser.FieldID:
			values[i] = new(uuid.UUID)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the AppUser fields.
func (au *AppUser) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case appuser.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				au.ID = *value
			}
		case appuser.FieldUsername:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field username", values[i])
			} else if value.Valid {
				au.Username = value.String
			}
		case appuser.FieldEmail:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field email", values[i])
			} else if value.Valid {
				au.Email = value.String
			}
		case appuser.FieldRole:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field role", values[i])
			} else if value.Valid {
				au.Role = value.String
			}
		case appuser.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				au.CreatedAt = value.Time
			}
		case appuser.FieldIsActive:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field is_active", values[i])
			} else if value.Valid {
				au.IsActive = value.Bool
			}
		default:
			au.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the AppUser.
// This includes values selected through modifiers, order, etc.
func (au *AppUser) Value(name string) (ent.Value, error) {
	return au.selectValues.Get(name)
}

// Update returns a builder for updating this AppUser.
// Note that you need to call AppUser.Unwrap() before calling this method if this AppUser
// was returned from a transaction, and the transaction was committed or rolled back.
func (au *AppUser) Update() *AppUserUpdateOne {
	return NewAppUserClient(au.config).UpdateOne(au)
}

// Unwrap unwraps the AppUser entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (au *AppUser) Unwrap() *AppUser {
	_tx, ok := au.config.driver.(*txDriver)
	if !ok {
		panic("ent: AppUser is not a transactional entity")
	}
	au.config.driver = _tx.drv
	return au
}

// String implements the fmt.Stringer.
func (au *AppUser) String() string {
	var builder strings.Builder
	builder.WriteString("AppUser(")
	builder.WriteString(fmt.Sprintf("id=%v, ", au.ID))
	builder.WriteString("username=")
	builder.WriteString(au.Username)
	builder.WriteString(", ")
	builder.WriteString("email=")
	builder.WriteString(au.Email)
	builder.WriteString(", ")
	builder.WriteString("role=")
	builder.WriteString(au.Role)
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(au.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("is_active=")
	builder.WriteString(fmt.Sprintf("%v", au.IsActive))
	builder.WriteByte(')')
	return builder.String()
}

// AppUsers is a parsable slice of AppUser.
type AppUsers []*AppUser
