// Code generated by ent, DO NOT EDIT.

package share

import (
	"basket-buddy-backend/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
)

// ID filters vertices based on their ID field.
func ID(id uuid.UUID) predicate.Share {
	return predicate.Share(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uuid.UUID) predicate.Share {
	return predicate.Share(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uuid.UUID) predicate.Share {
	return predicate.Share(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uuid.UUID) predicate.Share {
	return predicate.Share(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uuid.UUID) predicate.Share {
	return predicate.Share(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uuid.UUID) predicate.Share {
	return predicate.Share(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uuid.UUID) predicate.Share {
	return predicate.Share(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uuid.UUID) predicate.Share {
	return predicate.Share(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uuid.UUID) predicate.Share {
	return predicate.Share(sql.FieldLTE(FieldID, id))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.Share {
	return predicate.Share(sql.FieldEQ(FieldCreatedAt, v))
}

// Expiration applies equality check predicate on the "expiration" field. It's identical to ExpirationEQ.
func Expiration(v time.Time) predicate.Share {
	return predicate.Share(sql.FieldEQ(FieldExpiration, v))
}

// ShareCode applies equality check predicate on the "share_code" field. It's identical to ShareCodeEQ.
func ShareCode(v string) predicate.Share {
	return predicate.Share(sql.FieldEQ(FieldShareCode, v))
}

// CreatorID applies equality check predicate on the "creator_id" field. It's identical to CreatorIDEQ.
func CreatorID(v uuid.UUID) predicate.Share {
	return predicate.Share(sql.FieldEQ(FieldCreatorID, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.Share {
	return predicate.Share(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.Share {
	return predicate.Share(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.Share {
	return predicate.Share(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.Share {
	return predicate.Share(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.Share {
	return predicate.Share(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.Share {
	return predicate.Share(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.Share {
	return predicate.Share(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.Share {
	return predicate.Share(sql.FieldLTE(FieldCreatedAt, v))
}

// ExpirationEQ applies the EQ predicate on the "expiration" field.
func ExpirationEQ(v time.Time) predicate.Share {
	return predicate.Share(sql.FieldEQ(FieldExpiration, v))
}

// ExpirationNEQ applies the NEQ predicate on the "expiration" field.
func ExpirationNEQ(v time.Time) predicate.Share {
	return predicate.Share(sql.FieldNEQ(FieldExpiration, v))
}

// ExpirationIn applies the In predicate on the "expiration" field.
func ExpirationIn(vs ...time.Time) predicate.Share {
	return predicate.Share(sql.FieldIn(FieldExpiration, vs...))
}

// ExpirationNotIn applies the NotIn predicate on the "expiration" field.
func ExpirationNotIn(vs ...time.Time) predicate.Share {
	return predicate.Share(sql.FieldNotIn(FieldExpiration, vs...))
}

// ExpirationGT applies the GT predicate on the "expiration" field.
func ExpirationGT(v time.Time) predicate.Share {
	return predicate.Share(sql.FieldGT(FieldExpiration, v))
}

// ExpirationGTE applies the GTE predicate on the "expiration" field.
func ExpirationGTE(v time.Time) predicate.Share {
	return predicate.Share(sql.FieldGTE(FieldExpiration, v))
}

// ExpirationLT applies the LT predicate on the "expiration" field.
func ExpirationLT(v time.Time) predicate.Share {
	return predicate.Share(sql.FieldLT(FieldExpiration, v))
}

// ExpirationLTE applies the LTE predicate on the "expiration" field.
func ExpirationLTE(v time.Time) predicate.Share {
	return predicate.Share(sql.FieldLTE(FieldExpiration, v))
}

// ShareCodeEQ applies the EQ predicate on the "share_code" field.
func ShareCodeEQ(v string) predicate.Share {
	return predicate.Share(sql.FieldEQ(FieldShareCode, v))
}

// ShareCodeNEQ applies the NEQ predicate on the "share_code" field.
func ShareCodeNEQ(v string) predicate.Share {
	return predicate.Share(sql.FieldNEQ(FieldShareCode, v))
}

// ShareCodeIn applies the In predicate on the "share_code" field.
func ShareCodeIn(vs ...string) predicate.Share {
	return predicate.Share(sql.FieldIn(FieldShareCode, vs...))
}

// ShareCodeNotIn applies the NotIn predicate on the "share_code" field.
func ShareCodeNotIn(vs ...string) predicate.Share {
	return predicate.Share(sql.FieldNotIn(FieldShareCode, vs...))
}

// ShareCodeGT applies the GT predicate on the "share_code" field.
func ShareCodeGT(v string) predicate.Share {
	return predicate.Share(sql.FieldGT(FieldShareCode, v))
}

// ShareCodeGTE applies the GTE predicate on the "share_code" field.
func ShareCodeGTE(v string) predicate.Share {
	return predicate.Share(sql.FieldGTE(FieldShareCode, v))
}

// ShareCodeLT applies the LT predicate on the "share_code" field.
func ShareCodeLT(v string) predicate.Share {
	return predicate.Share(sql.FieldLT(FieldShareCode, v))
}

// ShareCodeLTE applies the LTE predicate on the "share_code" field.
func ShareCodeLTE(v string) predicate.Share {
	return predicate.Share(sql.FieldLTE(FieldShareCode, v))
}

// ShareCodeContains applies the Contains predicate on the "share_code" field.
func ShareCodeContains(v string) predicate.Share {
	return predicate.Share(sql.FieldContains(FieldShareCode, v))
}

// ShareCodeHasPrefix applies the HasPrefix predicate on the "share_code" field.
func ShareCodeHasPrefix(v string) predicate.Share {
	return predicate.Share(sql.FieldHasPrefix(FieldShareCode, v))
}

// ShareCodeHasSuffix applies the HasSuffix predicate on the "share_code" field.
func ShareCodeHasSuffix(v string) predicate.Share {
	return predicate.Share(sql.FieldHasSuffix(FieldShareCode, v))
}

// ShareCodeEqualFold applies the EqualFold predicate on the "share_code" field.
func ShareCodeEqualFold(v string) predicate.Share {
	return predicate.Share(sql.FieldEqualFold(FieldShareCode, v))
}

// ShareCodeContainsFold applies the ContainsFold predicate on the "share_code" field.
func ShareCodeContainsFold(v string) predicate.Share {
	return predicate.Share(sql.FieldContainsFold(FieldShareCode, v))
}

// CreatorIDEQ applies the EQ predicate on the "creator_id" field.
func CreatorIDEQ(v uuid.UUID) predicate.Share {
	return predicate.Share(sql.FieldEQ(FieldCreatorID, v))
}

// CreatorIDNEQ applies the NEQ predicate on the "creator_id" field.
func CreatorIDNEQ(v uuid.UUID) predicate.Share {
	return predicate.Share(sql.FieldNEQ(FieldCreatorID, v))
}

// CreatorIDIn applies the In predicate on the "creator_id" field.
func CreatorIDIn(vs ...uuid.UUID) predicate.Share {
	return predicate.Share(sql.FieldIn(FieldCreatorID, vs...))
}

// CreatorIDNotIn applies the NotIn predicate on the "creator_id" field.
func CreatorIDNotIn(vs ...uuid.UUID) predicate.Share {
	return predicate.Share(sql.FieldNotIn(FieldCreatorID, vs...))
}

// CreatorIDGT applies the GT predicate on the "creator_id" field.
func CreatorIDGT(v uuid.UUID) predicate.Share {
	return predicate.Share(sql.FieldGT(FieldCreatorID, v))
}

// CreatorIDGTE applies the GTE predicate on the "creator_id" field.
func CreatorIDGTE(v uuid.UUID) predicate.Share {
	return predicate.Share(sql.FieldGTE(FieldCreatorID, v))
}

// CreatorIDLT applies the LT predicate on the "creator_id" field.
func CreatorIDLT(v uuid.UUID) predicate.Share {
	return predicate.Share(sql.FieldLT(FieldCreatorID, v))
}

// CreatorIDLTE applies the LTE predicate on the "creator_id" field.
func CreatorIDLTE(v uuid.UUID) predicate.Share {
	return predicate.Share(sql.FieldLTE(FieldCreatorID, v))
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Share) predicate.Share {
	return predicate.Share(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Share) predicate.Share {
	return predicate.Share(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Share) predicate.Share {
	return predicate.Share(sql.NotPredicates(p))
}
