// Code generated by ent, DO NOT EDIT.

package ent

import (
	"basket-buddy-backend/ent/share"
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
)

// ShareCreate is the builder for creating a Share entity.
type ShareCreate struct {
	config
	mutation *ShareMutation
	hooks    []Hook
}

// SetCreatedAt sets the "created_at" field.
func (sc *ShareCreate) SetCreatedAt(t time.Time) *ShareCreate {
	sc.mutation.SetCreatedAt(t)
	return sc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (sc *ShareCreate) SetNillableCreatedAt(t *time.Time) *ShareCreate {
	if t != nil {
		sc.SetCreatedAt(*t)
	}
	return sc
}

// SetExpiration sets the "expiration" field.
func (sc *ShareCreate) SetExpiration(t time.Time) *ShareCreate {
	sc.mutation.SetExpiration(t)
	return sc
}

// SetShareCode sets the "share_code" field.
func (sc *ShareCreate) SetShareCode(s string) *ShareCreate {
	sc.mutation.SetShareCode(s)
	return sc
}

// SetData sets the "data" field.
func (sc *ShareCreate) SetData(m []map[string]interface{}) *ShareCreate {
	sc.mutation.SetData(m)
	return sc
}

// SetCreatorID sets the "creator_id" field.
func (sc *ShareCreate) SetCreatorID(u uuid.UUID) *ShareCreate {
	sc.mutation.SetCreatorID(u)
	return sc
}

// SetStatus sets the "status" field.
func (sc *ShareCreate) SetStatus(s string) *ShareCreate {
	sc.mutation.SetStatus(s)
	return sc
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (sc *ShareCreate) SetNillableStatus(s *string) *ShareCreate {
	if s != nil {
		sc.SetStatus(*s)
	}
	return sc
}

// SetID sets the "id" field.
func (sc *ShareCreate) SetID(u uuid.UUID) *ShareCreate {
	sc.mutation.SetID(u)
	return sc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (sc *ShareCreate) SetNillableID(u *uuid.UUID) *ShareCreate {
	if u != nil {
		sc.SetID(*u)
	}
	return sc
}

// Mutation returns the ShareMutation object of the builder.
func (sc *ShareCreate) Mutation() *ShareMutation {
	return sc.mutation
}

// Save creates the Share in the database.
func (sc *ShareCreate) Save(ctx context.Context) (*Share, error) {
	sc.defaults()
	return withHooks(ctx, sc.sqlSave, sc.mutation, sc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (sc *ShareCreate) SaveX(ctx context.Context) *Share {
	v, err := sc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (sc *ShareCreate) Exec(ctx context.Context) error {
	_, err := sc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (sc *ShareCreate) ExecX(ctx context.Context) {
	if err := sc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (sc *ShareCreate) defaults() {
	if _, ok := sc.mutation.CreatedAt(); !ok {
		v := share.DefaultCreatedAt()
		sc.mutation.SetCreatedAt(v)
	}
	if _, ok := sc.mutation.Status(); !ok {
		v := share.DefaultStatus
		sc.mutation.SetStatus(v)
	}
	if _, ok := sc.mutation.ID(); !ok {
		v := share.DefaultID()
		sc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (sc *ShareCreate) check() error {
	if _, ok := sc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "Share.created_at"`)}
	}
	if _, ok := sc.mutation.Expiration(); !ok {
		return &ValidationError{Name: "expiration", err: errors.New(`ent: missing required field "Share.expiration"`)}
	}
	if _, ok := sc.mutation.ShareCode(); !ok {
		return &ValidationError{Name: "share_code", err: errors.New(`ent: missing required field "Share.share_code"`)}
	}
	if _, ok := sc.mutation.Data(); !ok {
		return &ValidationError{Name: "data", err: errors.New(`ent: missing required field "Share.data"`)}
	}
	if _, ok := sc.mutation.CreatorID(); !ok {
		return &ValidationError{Name: "creator_id", err: errors.New(`ent: missing required field "Share.creator_id"`)}
	}
	if _, ok := sc.mutation.Status(); !ok {
		return &ValidationError{Name: "status", err: errors.New(`ent: missing required field "Share.status"`)}
	}
	return nil
}

func (sc *ShareCreate) sqlSave(ctx context.Context) (*Share, error) {
	if err := sc.check(); err != nil {
		return nil, err
	}
	_node, _spec := sc.createSpec()
	if err := sqlgraph.CreateNode(ctx, sc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	sc.mutation.id = &_node.ID
	sc.mutation.done = true
	return _node, nil
}

func (sc *ShareCreate) createSpec() (*Share, *sqlgraph.CreateSpec) {
	var (
		_node = &Share{config: sc.config}
		_spec = sqlgraph.NewCreateSpec(share.Table, sqlgraph.NewFieldSpec(share.FieldID, field.TypeUUID))
	)
	if id, ok := sc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := sc.mutation.CreatedAt(); ok {
		_spec.SetField(share.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := sc.mutation.Expiration(); ok {
		_spec.SetField(share.FieldExpiration, field.TypeTime, value)
		_node.Expiration = value
	}
	if value, ok := sc.mutation.ShareCode(); ok {
		_spec.SetField(share.FieldShareCode, field.TypeString, value)
		_node.ShareCode = value
	}
	if value, ok := sc.mutation.Data(); ok {
		_spec.SetField(share.FieldData, field.TypeJSON, value)
		_node.Data = value
	}
	if value, ok := sc.mutation.CreatorID(); ok {
		_spec.SetField(share.FieldCreatorID, field.TypeUUID, value)
		_node.CreatorID = value
	}
	if value, ok := sc.mutation.Status(); ok {
		_spec.SetField(share.FieldStatus, field.TypeString, value)
		_node.Status = value
	}
	return _node, _spec
}

// ShareCreateBulk is the builder for creating many Share entities in bulk.
type ShareCreateBulk struct {
	config
	err      error
	builders []*ShareCreate
}

// Save creates the Share entities in the database.
func (scb *ShareCreateBulk) Save(ctx context.Context) ([]*Share, error) {
	if scb.err != nil {
		return nil, scb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(scb.builders))
	nodes := make([]*Share, len(scb.builders))
	mutators := make([]Mutator, len(scb.builders))
	for i := range scb.builders {
		func(i int, root context.Context) {
			builder := scb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*ShareMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, scb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, scb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, scb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (scb *ShareCreateBulk) SaveX(ctx context.Context) []*Share {
	v, err := scb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (scb *ShareCreateBulk) Exec(ctx context.Context) error {
	_, err := scb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (scb *ShareCreateBulk) ExecX(ctx context.Context) {
	if err := scb.Exec(ctx); err != nil {
		panic(err)
	}
}
