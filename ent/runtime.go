// Code generated by ent, DO NOT EDIT.

package ent

import (
	"basket-buddy-backend/ent/appuser"
	"basket-buddy-backend/ent/schema"
	"basket-buddy-backend/ent/share"
	"time"

	"github.com/google/uuid"
)

// The init function reads all schema descriptors with runtime code
// (default values, validators, hooks and policies) and stitches it
// to their package variables.
func init() {
	appuserFields := schema.AppUser{}.Fields()
	_ = appuserFields
	// appuserDescUsername is the schema descriptor for username field.
	appuserDescUsername := appuserFields[1].Descriptor()
	// appuser.UsernameValidator is a validator for the "username" field. It is called by the builders before save.
	appuser.UsernameValidator = func() func(string) error {
		validators := appuserDescUsername.Validators
		fns := [...]func(string) error{
			validators[0].(func(string) error),
			validators[1].(func(string) error),
		}
		return func(username string) error {
			for _, fn := range fns {
				if err := fn(username); err != nil {
					return err
				}
			}
			return nil
		}
	}()
	// appuserDescEmail is the schema descriptor for email field.
	appuserDescEmail := appuserFields[2].Descriptor()
	// appuser.EmailValidator is a validator for the "email" field. It is called by the builders before save.
	appuser.EmailValidator = func() func(string) error {
		validators := appuserDescEmail.Validators
		fns := [...]func(string) error{
			validators[0].(func(string) error),
			validators[1].(func(string) error),
		}
		return func(email string) error {
			for _, fn := range fns {
				if err := fn(email); err != nil {
					return err
				}
			}
			return nil
		}
	}()
	// appuserDescRole is the schema descriptor for role field.
	appuserDescRole := appuserFields[3].Descriptor()
	// appuser.RoleValidator is a validator for the "role" field. It is called by the builders before save.
	appuser.RoleValidator = func() func(string) error {
		validators := appuserDescRole.Validators
		fns := [...]func(string) error{
			validators[0].(func(string) error),
			validators[1].(func(string) error),
		}
		return func(role string) error {
			for _, fn := range fns {
				if err := fn(role); err != nil {
					return err
				}
			}
			return nil
		}
	}()
	// appuserDescCreatedAt is the schema descriptor for created_at field.
	appuserDescCreatedAt := appuserFields[4].Descriptor()
	// appuser.DefaultCreatedAt holds the default value on creation for the created_at field.
	appuser.DefaultCreatedAt = appuserDescCreatedAt.Default.(func() time.Time)
	// appuserDescIsActive is the schema descriptor for is_active field.
	appuserDescIsActive := appuserFields[5].Descriptor()
	// appuser.DefaultIsActive holds the default value on creation for the is_active field.
	appuser.DefaultIsActive = appuserDescIsActive.Default.(bool)
	// appuserDescID is the schema descriptor for id field.
	appuserDescID := appuserFields[0].Descriptor()
	// appuser.DefaultID holds the default value on creation for the id field.
	appuser.DefaultID = appuserDescID.Default.(func() uuid.UUID)
	shareFields := schema.Share{}.Fields()
	_ = shareFields
	// shareDescCreatedAt is the schema descriptor for created_at field.
	shareDescCreatedAt := shareFields[1].Descriptor()
	// share.DefaultCreatedAt holds the default value on creation for the created_at field.
	share.DefaultCreatedAt = shareDescCreatedAt.Default.(func() time.Time)
	// shareDescStatus is the schema descriptor for status field.
	shareDescStatus := shareFields[6].Descriptor()
	// share.DefaultStatus holds the default value on creation for the status field.
	share.DefaultStatus = shareDescStatus.Default.(string)
	// shareDescID is the schema descriptor for id field.
	shareDescID := shareFields[0].Descriptor()
	// share.DefaultID holds the default value on creation for the id field.
	share.DefaultID = shareDescID.Default.(func() uuid.UUID)
}
