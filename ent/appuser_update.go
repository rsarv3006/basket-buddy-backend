// Code generated by ent, DO NOT EDIT.

package ent

import (
	"basket-buddy-backend/ent/appuser"
	"basket-buddy-backend/ent/predicate"
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// AppUserUpdate is the builder for updating AppUser entities.
type AppUserUpdate struct {
	config
	hooks    []Hook
	mutation *AppUserMutation
}

// Where appends a list predicates to the AppUserUpdate builder.
func (auu *AppUserUpdate) Where(ps ...predicate.AppUser) *AppUserUpdate {
	auu.mutation.Where(ps...)
	return auu
}

// SetUsername sets the "username" field.
func (auu *AppUserUpdate) SetUsername(s string) *AppUserUpdate {
	auu.mutation.SetUsername(s)
	return auu
}

// SetNillableUsername sets the "username" field if the given value is not nil.
func (auu *AppUserUpdate) SetNillableUsername(s *string) *AppUserUpdate {
	if s != nil {
		auu.SetUsername(*s)
	}
	return auu
}

// SetEmail sets the "email" field.
func (auu *AppUserUpdate) SetEmail(s string) *AppUserUpdate {
	auu.mutation.SetEmail(s)
	return auu
}

// SetNillableEmail sets the "email" field if the given value is not nil.
func (auu *AppUserUpdate) SetNillableEmail(s *string) *AppUserUpdate {
	if s != nil {
		auu.SetEmail(*s)
	}
	return auu
}

// SetRole sets the "role" field.
func (auu *AppUserUpdate) SetRole(s string) *AppUserUpdate {
	auu.mutation.SetRole(s)
	return auu
}

// SetNillableRole sets the "role" field if the given value is not nil.
func (auu *AppUserUpdate) SetNillableRole(s *string) *AppUserUpdate {
	if s != nil {
		auu.SetRole(*s)
	}
	return auu
}

// SetIsActive sets the "is_active" field.
func (auu *AppUserUpdate) SetIsActive(b bool) *AppUserUpdate {
	auu.mutation.SetIsActive(b)
	return auu
}

// SetNillableIsActive sets the "is_active" field if the given value is not nil.
func (auu *AppUserUpdate) SetNillableIsActive(b *bool) *AppUserUpdate {
	if b != nil {
		auu.SetIsActive(*b)
	}
	return auu
}

// Mutation returns the AppUserMutation object of the builder.
func (auu *AppUserUpdate) Mutation() *AppUserMutation {
	return auu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (auu *AppUserUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, auu.sqlSave, auu.mutation, auu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (auu *AppUserUpdate) SaveX(ctx context.Context) int {
	affected, err := auu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (auu *AppUserUpdate) Exec(ctx context.Context) error {
	_, err := auu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (auu *AppUserUpdate) ExecX(ctx context.Context) {
	if err := auu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (auu *AppUserUpdate) check() error {
	if v, ok := auu.mutation.Username(); ok {
		if err := appuser.UsernameValidator(v); err != nil {
			return &ValidationError{Name: "username", err: fmt.Errorf(`ent: validator failed for field "AppUser.username": %w`, err)}
		}
	}
	if v, ok := auu.mutation.Email(); ok {
		if err := appuser.EmailValidator(v); err != nil {
			return &ValidationError{Name: "email", err: fmt.Errorf(`ent: validator failed for field "AppUser.email": %w`, err)}
		}
	}
	if v, ok := auu.mutation.Role(); ok {
		if err := appuser.RoleValidator(v); err != nil {
			return &ValidationError{Name: "role", err: fmt.Errorf(`ent: validator failed for field "AppUser.role": %w`, err)}
		}
	}
	return nil
}

func (auu *AppUserUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := auu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(appuser.Table, appuser.Columns, sqlgraph.NewFieldSpec(appuser.FieldID, field.TypeUUID))
	if ps := auu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := auu.mutation.Username(); ok {
		_spec.SetField(appuser.FieldUsername, field.TypeString, value)
	}
	if value, ok := auu.mutation.Email(); ok {
		_spec.SetField(appuser.FieldEmail, field.TypeString, value)
	}
	if value, ok := auu.mutation.Role(); ok {
		_spec.SetField(appuser.FieldRole, field.TypeString, value)
	}
	if value, ok := auu.mutation.IsActive(); ok {
		_spec.SetField(appuser.FieldIsActive, field.TypeBool, value)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, auu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{appuser.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	auu.mutation.done = true
	return n, nil
}

// AppUserUpdateOne is the builder for updating a single AppUser entity.
type AppUserUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *AppUserMutation
}

// SetUsername sets the "username" field.
func (auuo *AppUserUpdateOne) SetUsername(s string) *AppUserUpdateOne {
	auuo.mutation.SetUsername(s)
	return auuo
}

// SetNillableUsername sets the "username" field if the given value is not nil.
func (auuo *AppUserUpdateOne) SetNillableUsername(s *string) *AppUserUpdateOne {
	if s != nil {
		auuo.SetUsername(*s)
	}
	return auuo
}

// SetEmail sets the "email" field.
func (auuo *AppUserUpdateOne) SetEmail(s string) *AppUserUpdateOne {
	auuo.mutation.SetEmail(s)
	return auuo
}

// SetNillableEmail sets the "email" field if the given value is not nil.
func (auuo *AppUserUpdateOne) SetNillableEmail(s *string) *AppUserUpdateOne {
	if s != nil {
		auuo.SetEmail(*s)
	}
	return auuo
}

// SetRole sets the "role" field.
func (auuo *AppUserUpdateOne) SetRole(s string) *AppUserUpdateOne {
	auuo.mutation.SetRole(s)
	return auuo
}

// SetNillableRole sets the "role" field if the given value is not nil.
func (auuo *AppUserUpdateOne) SetNillableRole(s *string) *AppUserUpdateOne {
	if s != nil {
		auuo.SetRole(*s)
	}
	return auuo
}

// SetIsActive sets the "is_active" field.
func (auuo *AppUserUpdateOne) SetIsActive(b bool) *AppUserUpdateOne {
	auuo.mutation.SetIsActive(b)
	return auuo
}

// SetNillableIsActive sets the "is_active" field if the given value is not nil.
func (auuo *AppUserUpdateOne) SetNillableIsActive(b *bool) *AppUserUpdateOne {
	if b != nil {
		auuo.SetIsActive(*b)
	}
	return auuo
}

// Mutation returns the AppUserMutation object of the builder.
func (auuo *AppUserUpdateOne) Mutation() *AppUserMutation {
	return auuo.mutation
}

// Where appends a list predicates to the AppUserUpdate builder.
func (auuo *AppUserUpdateOne) Where(ps ...predicate.AppUser) *AppUserUpdateOne {
	auuo.mutation.Where(ps...)
	return auuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (auuo *AppUserUpdateOne) Select(field string, fields ...string) *AppUserUpdateOne {
	auuo.fields = append([]string{field}, fields...)
	return auuo
}

// Save executes the query and returns the updated AppUser entity.
func (auuo *AppUserUpdateOne) Save(ctx context.Context) (*AppUser, error) {
	return withHooks(ctx, auuo.sqlSave, auuo.mutation, auuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (auuo *AppUserUpdateOne) SaveX(ctx context.Context) *AppUser {
	node, err := auuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (auuo *AppUserUpdateOne) Exec(ctx context.Context) error {
	_, err := auuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (auuo *AppUserUpdateOne) ExecX(ctx context.Context) {
	if err := auuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (auuo *AppUserUpdateOne) check() error {
	if v, ok := auuo.mutation.Username(); ok {
		if err := appuser.UsernameValidator(v); err != nil {
			return &ValidationError{Name: "username", err: fmt.Errorf(`ent: validator failed for field "AppUser.username": %w`, err)}
		}
	}
	if v, ok := auuo.mutation.Email(); ok {
		if err := appuser.EmailValidator(v); err != nil {
			return &ValidationError{Name: "email", err: fmt.Errorf(`ent: validator failed for field "AppUser.email": %w`, err)}
		}
	}
	if v, ok := auuo.mutation.Role(); ok {
		if err := appuser.RoleValidator(v); err != nil {
			return &ValidationError{Name: "role", err: fmt.Errorf(`ent: validator failed for field "AppUser.role": %w`, err)}
		}
	}
	return nil
}

func (auuo *AppUserUpdateOne) sqlSave(ctx context.Context) (_node *AppUser, err error) {
	if err := auuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(appuser.Table, appuser.Columns, sqlgraph.NewFieldSpec(appuser.FieldID, field.TypeUUID))
	id, ok := auuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "AppUser.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := auuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, appuser.FieldID)
		for _, f := range fields {
			if !appuser.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != appuser.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := auuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := auuo.mutation.Username(); ok {
		_spec.SetField(appuser.FieldUsername, field.TypeString, value)
	}
	if value, ok := auuo.mutation.Email(); ok {
		_spec.SetField(appuser.FieldEmail, field.TypeString, value)
	}
	if value, ok := auuo.mutation.Role(); ok {
		_spec.SetField(appuser.FieldRole, field.TypeString, value)
	}
	if value, ok := auuo.mutation.IsActive(); ok {
		_spec.SetField(appuser.FieldIsActive, field.TypeBool, value)
	}
	_node = &AppUser{config: auuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, auuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{appuser.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	auuo.mutation.done = true
	return _node, nil
}
